name: destroy
on: [workflow_dispatch]

jobs:
  aws:
    name: Deploy To AWS
    environment:
      name: aws
    runs-on: ubuntu-latest

    steps:
    - uses: hashicorp/setup-terraform@v1

    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get State
      env:
        S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      run: |
        cd terraform
        aws s3 sync "${S3_BUCKET}" . &>/dev/null
        rm -f dev-terraform.tfstate

    - name: Save Secrets
      env: 
        VPC_ID: ${{ secrets.AWS_VPC_ID }}
        CLUSTER_NAME: ${{ secrets.AWS_CLUSTER_NAME }}
        SECURITY_GROUP: ${{ secrets.AWS_SECURITY_GROUP }}
        REGION: ${{ secrets.AWS_REGION }}
      run: |
          envsubst < terraform/main.tf > tempsecret
          cat tempsecret > terraform/main.tf
          envsubst < terraform/cluster.tf > tempsecret
          cat tempsecret > terraform/cluster.tf
          envsubst < terraform/services.tf > tempsecret
          cat tempsecret > terraform/services.tf
          envsubst < terraform/tasks.tf > tempsecret
          cat tempsecret > terraform/tasks.tf
          rm tempsecret

    - name: Update API Gateway
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        CLUSTER_NAME: ${{ secrets.AWS_CLUSTER_NAME }}
        APINAME: ${{ secrets.AWS_API_NAME }}
      run: |        
        GETAPI=$(aws apigatewayv2 get-apis)
        if echo $GETAPI | grep -q "$APINAME"; then
          APIID=$(echo $GETAPI | jq -r --arg APINAME "$APINAME" '.Items[] | select(.Name==$APINAME).ApiId')
          aws apigatewayv2 delete-api --api-id "$APIID"
        fi

    - name: Terraform Init
      env:
        TF_ACTION_WORKING_DIR: 'terraform'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
          cd terraform
          terraform init

    - name: Terraform Remove Permanent Resources From State
      env:
        TF_ACTION_WORKING_DIR: 'terraform'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
          cd terraform
          cp terraform.tfstate tempstate
          ECSTASKSNAMES=$(cat terraform.tfstate | jq -r '.resources[] | select(.type=="aws_ecs_task_definition").name')
          for ECSTASKNAME in $ECSTASKSNAMES
          do
            terraform state rm "aws_ecs_task_definition.${ECSTASKNAME}" &>/dev/null
          done

    - name: Terraform Destroy
      env:
        TF_ACTION_WORKING_DIR: 'terraform'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
          cd terraform
          terraform destroy -auto-approve &>/dev/null

    - name: Terraform Add Permanent Resources To State
      env:
        TF_ACTION_WORKING_DIR: 'terraform'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
          cd terraform
          IMPORTSERVICES=$(cat tempstate | jq -r '.resources[] | select(.type=="aws_ecs_task_definition").instances[].attributes.arn')
          for IMPORTSERVICE in $IMPORTSERVICES
          do
              TASKNAME=$(cat tempstate | jq -r --arg IMPORTSERVICE $IMPORTSERVICE '.resources[] | select(.instances[].attributes.arn==$IMPORTSERVICE).name')
              terraform import "aws_ecs_task_definition.${TASKNAME}" "${IMPORTSERVICE}" &>/dev/null
          done
          rm -f tempstate

    - name: Publish State
      env:
        S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      run: |
        aws s3 sync terraform "${S3_BUCKET}" --exclude "*" --include "terraform.tfstate" &>/dev/null