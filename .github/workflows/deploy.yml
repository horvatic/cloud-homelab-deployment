name: deploy
on: [workflow_dispatch]

jobs:
  aws:
    name: Deploy To AWS
    environment:
      name: aws
    runs-on: ubuntu-latest

    steps:
    - uses: hashicorp/setup-terraform@v1

    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get State
      env:
        S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      run: |
        cd terraform
        aws s3 sync "${S3_BUCKET}" . --exclude "*" --include "terraform.tfstate" &>/dev/null

    - name: Save Secrets
      env: 
        VPC_ID: ${{ secrets.AWS_VPC_ID }}
        CLUSTER_NAME: ${{ secrets.AWS_CLUSTER_NAME }}
        SECURITY_GROUP: ${{ secrets.AWS_SECURITY_GROUP }}
        REGION: ${{ secrets.AWS_REGION }}
        AWS_SSM_ARN: ${{ secrets.AWS_SSM_ARN }}
        AWS_SECRET_ROLE: ${{ secrets.AWS_SECRET_ROLE }}
      run: |
          envsubst < terraform/main.tf > tempsecret
          cat tempsecret > terraform/main.tf
          envsubst < terraform/cluster.tf > tempsecret
          cat tempsecret > terraform/cluster.tf
          envsubst < terraform/services.tf > tempsecret
          cat tempsecret > terraform/services.tf
          envsubst < terraform/tasks.tf > tempsecret
          cat tempsecret > terraform/tasks.tf
          rm tempsecret

    - name: Terraform Init
      env:
        TF_ACTION_WORKING_DIR: 'terraform'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
          cd terraform
          terraform init

    - name: Terraform Apply
      env:
        TF_ACTION_WORKING_DIR: 'terraform'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
          cd terraform
          terraform apply -auto-approve  &>/dev/null

    - name: Publish State
      env:
        S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      run: |
        aws s3 sync terraform "${S3_BUCKET}" --exclude "*" --include "terraform.tfstate" &>/dev/null

    - name: Update API Gateway
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        CLUSTER_NAME: ${{ secrets.AWS_CLUSTER_NAME }}
        APINAME: ${{ secrets.AWS_API_NAME }}
      run: |
        cd terraform

        GETAPI=$(aws apigatewayv2 get-apis)
        if !(echo $GETAPI | grep -q "$APINAME"); then
          APIID=$(aws apigatewayv2 create-api --name "${APINAME}" --protocol-type HTTP | jq -r '.ApiId')
          aws apigatewayv2 create-stage --api-id "${APIID}" --stage-name '$default' --auto-deploy &>/dev/null
        else
          APIID=$(echo $GETAPI | jq -r --arg APINAME "$APINAME" '.Items[] | select(.Name==$APINAME).ApiId')
          aws apigatewayv2 delete-api --api-id "$APIID" &>/dev/null
          APIID=$(aws apigatewayv2 create-api --name "${APINAME}" --protocol-type HTTP | jq -r '.ApiId')
          aws apigatewayv2 create-stage --api-id "${APIID}" --stage-name '$default' --auto-deploy &>/dev/null
        fi

        SERVICE_ARNS=$(aws ecs list-services --cluster "$CLUSTER_NAME"  --query 'serviceArns' | jq -r '.[]')

        for SERVICE_ARN in $SERVICE_ARNS
        do
          SERVICE_NAME=$(aws ecs describe-services --cluster "$CLUSTER_NAME" --services "$SERVICE_ARN" | jq -r '.services[].serviceName')
          TASK_ARN=$(aws ecs list-tasks --cluster "$CLUSTER_NAME"  --service-name "$SERVICE_NAME" --query 'taskArns[0]' --output text)
          TASK_DETAILS=$(aws ecs describe-tasks --cluster "$CLUSTER_NAME" --task "${TASK_ARN}" --query 'tasks[0]')
          ENI=$(echo $TASK_DETAILS | jq -r '.attachments[0].details[] | select(.name=="networkInterfaceId").value')
          IP=$(aws ec2 describe-network-interfaces --network-interface-ids "${ENI}" --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
          TASK_DEF_ARN=$(echo $TASK_DETAILS | jq -r '.taskDefinitionArn')          
          PORT=$(cat terraform.tfstate | jq --arg TASK_DEF_ARN $TASK_DEF_ARN -r '.resources[] | select(.instances[].attributes.arn==$TASK_DEF_ARN)' | jq '.instances[0].attributes.container_definitions | fromjson | .[].portMappings[].hostPort')

          INTEGRATIONID=$(aws apigatewayv2 create-integration --api-id "${APIID}" --integration-type HTTP_PROXY --integration-uri "http://${IP}:${PORT}/{proxy}" --payload-format-version 1.0 --integration-method "ANY" | jq -r '.IntegrationId')
          
          if [ "$SERVICE_NAME" == "zracni-udar-ui" ]; then
            aws apigatewayv2 create-route --api-id "${APIID}" --route-key "ANY /{proxy+}" --target "integrations/${INTEGRATIONID}" &>/dev/null
          else
            aws apigatewayv2 create-route --api-id "${APIID}" --route-key "ANY /${SERVICE_NAME}/{proxy+}" --target "integrations/${INTEGRATIONID}" &>/dev/null
          fi
        done